<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class NvlCmsDomainModelPostPostHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="int_id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = (int) $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['title'])) {
            $value = $data['title'];
            $return = (string) $value;
            $this->class->reflFields['title']->setValue($document, $return);
            $hydratedData['title'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['displayContent'])) {
            $value = $data['displayContent'];
            $return = (string) $value;
            $this->class->reflFields['displayContent']->setValue($document, $return);
            $hydratedData['displayContent'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['originalContent'])) {
            $value = $data['originalContent'];
            $return = (string) $value;
            $this->class->reflFields['originalContent']->setValue($document, $return);
            $hydratedData['originalContent'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['author'])) {
            $value = $data['author'];
            $return = (string) $value;
            $this->class->reflFields['author']->setValue($document, $return);
            $hydratedData['author'] = $return;
        }

        /** @Field(type="timestamp") */
        if (isset($data['createdDate'])) {
            $value = $data['createdDate'];
            $return = $value;
            $this->class->reflFields['createdDate']->setValue($document, $return);
            $hydratedData['createdDate'] = $return;
        }

        /** @Field(type="timestamp") */
        if (isset($data['modifiedDate'])) {
            $value = $data['modifiedDate'];
            $return = $value;
            $this->class->reflFields['modifiedDate']->setValue($document, $return);
            $hydratedData['modifiedDate'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['tags'])) {
            $value = $data['tags'];
            $return = $value;
            $this->class->reflFields['tags']->setValue($document, $return);
            $hydratedData['tags'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['status'])) {
            $value = $data['status'];
            $return = (string) $value;
            $this->class->reflFields['status']->setValue($document, $return);
            $hydratedData['status'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['commentCount'])) {
            $value = $data['commentCount'];
            $return = (int) $value;
            $this->class->reflFields['commentCount']->setValue($document, $return);
            $hydratedData['commentCount'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['likeCount'])) {
            $value = $data['likeCount'];
            $return = (int) $value;
            $this->class->reflFields['likeCount']->setValue($document, $return);
            $hydratedData['likeCount'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['sticky'])) {
            $value = $data['sticky'];
            $return = (bool) $value;
            $this->class->reflFields['sticky']->setValue($document, $return);
            $hydratedData['sticky'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['type'])) {
            $embeddedDocument = $data['type'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['type'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);
            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['type'], $document, 'type');

            $this->class->reflFields['type']->setValue($document, $return);
            $hydratedData['type'] = $return;
        }
        return $hydratedData;
    }
}